// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: src/modules/leaderboards/protos/leaderboard.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "leaderboards";

export interface LeaderboardRequest {
}

export interface LeaderboardResponse {
  entries: LeaderboardEntry[];
}

export interface LeaderboardEntry {
  userId: string;
  score: number;
}

export interface ScoreUpdateRequest {
  score: number;
}

export interface ScoreUpdateResponse {
  success: boolean;
}

export const LEADERBOARDS_PACKAGE_NAME = "leaderboards";

export interface LeaderboardServiceClient {
  getLeaderboard(request: LeaderboardRequest, metadata: Metadata, ...rest: any): Observable<LeaderboardResponse>;

  updateScore(request: ScoreUpdateRequest, metadata: Metadata, ...rest: any): Observable<ScoreUpdateResponse>;
}

export interface LeaderboardServiceController {
  getLeaderboard(
    request: LeaderboardRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<LeaderboardResponse> | Observable<LeaderboardResponse> | LeaderboardResponse;

  updateScore(
    request: ScoreUpdateRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ScoreUpdateResponse> | Observable<ScoreUpdateResponse> | ScoreUpdateResponse;
}

export function LeaderboardServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getLeaderboard", "updateScore"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LeaderboardService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LeaderboardService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LEADERBOARD_SERVICE_NAME = "LeaderboardService";
